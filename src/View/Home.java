/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Controler.LoginImplementeDAO;
import Model.Loginc;
import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.Color;
import java.awt.Font;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;


public final class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        LoadPersonTable();
        initStyle();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtname = new javax.swing.JTextField();
        txtlastname = new javax.swing.JTextField();
        txtage = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        confirmpassword = new javax.swing.JPasswordField();
        jProgressBar1 = new javax.swing.JProgressBar();
        add = new javax.swing.JButton();
        txtmail = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListPerson = new javax.swing.JTable();
        BtnUpdate = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        ListPerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "FirstName", "LastName", "Age", "E-mail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ListPerson.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListPersonMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ListPerson);

        BtnUpdate.setText("Modifier");
        BtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnUpdateActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(20, 46, 98));
        jLabel1.setText("Ajout des Utilisateurs dans la table Person");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(134, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(29, 29, 29))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtname, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                                    .addComponent(txtlastname))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtage, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtmail, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(83, 83, 83)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(BtnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(add))
                            .addComponent(password, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                            .addComponent(confirmpassword, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmpassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtlastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(add)
                        .addComponent(BtnUpdate)))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void initStyle() {
    // Couleur de fond uniforme
    Color bg = new Color(238, 238, 238);

    txtname.setBackground(bg);
    txtlastname.setBackground(bg);
    txtmail.setBackground(bg);
    txtage.setBackground(bg);
    password.setBackground(bg);
    confirmpassword.setBackground(bg);


    // Placeholder (texte grisé avant la saisie)
    txtname.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Prénom");
    txtlastname.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Nom");
    txtmail.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "E-mail");
    txtage.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Âge");
    password.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Mot de passe");
    confirmpassword.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Confirmer le Mot de passe");

    
password.putClientProperty(FlatClientProperties.STYLE, ""
                + "showRevealButton:true;"
                + "showCapsLock:true");
confirmpassword.putClientProperty(FlatClientProperties.STYLE, ""
                + "showRevealButton:true;"
                + "showCapsLock:true");

    // Barre de progression (pour la force du mot de passe)
    jProgressBar1.setMinimum(0);
    jProgressBar1.setMaximum(5);
    jProgressBar1.setStringPainted(true);
    jProgressBar1.setBackground(new Color(230, 230, 230));
    jProgressBar1.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200), 1, true));

    // ScrollPane
    jScrollPane1.setBorder(BorderFactory.createEmptyBorder());
    jScrollPane1.getViewport().setBackground(Color.WHITE);
}

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        String firstname = txtname.getText().trim();
        String lastname = txtlastname.getText().trim();
        String ageText = txtage.getText().trim();
        String email = txtmail.getText().trim();
        String passwordText = new String(password.getPassword());
        String confirmPasswordText = new String(confirmpassword.getPassword());

        // Vérification des champs vides
        if (firstname.isEmpty() || lastname.isEmpty() || ageText.isEmpty() || email.isEmpty()
                || passwordText.isEmpty() || confirmPasswordText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Remplissez tous les champs !");
            return;
        }

        // Vérification de l'âge
        int age;
        try {
            age = Integer.parseInt(ageText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "L'âge doit être un nombre !");
            return;
        }

        // Vérification correspondance mot de passe
        if (!passwordText.equals(confirmPasswordText)) {
            JOptionPane.showMessageDialog(this, "Les mots de passe ne correspondent pas !");
            return;
        }

        // Évaluer la force du mot de passe
        int strength = getPasswordStrength(passwordText);
        updatePasswordStrengthBar(strength); // ta JProgressBar
        if (strength < 3) {
            JOptionPane.showMessageDialog(this, "Mot de passe trop faible !");
            return;
        }

        // Création de l'objet Loginc
        Model.Loginc user = new Loginc();
        user.setFirstname(firstname);
        user.setLastname(lastname);
        user.setAge(age);
        user.setEmail(email);
        user.setPassword(passwordText);

        // Ajouter en DB via DAO
        Controler.LoginImplementeDAO dao = new LoginImplementeDAO();
        dao.ajouter(user);
        // Recharge le tableau
        LoadPersonTable();
        // Réinitialisation des champs
        txtname.setText("");
        txtlastname.setText("");
        txtage.setText("");
        txtmail.setText("");
        password.setText("");
        confirmpassword.setText("");
        jProgressBar1.setValue(0);


    }//GEN-LAST:event_addActionPerformed
    private int selectedPersonId = -1;

    private void ListPersonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListPersonMouseClicked
        DefaultTableModel model = (DefaultTableModel) ListPerson.getModel();
        int selectedRow = ListPerson.getSelectedRow();

        if (selectedRow >= 0) {
            txtname.setText(model.getValueAt(selectedRow, 1).toString());
            txtlastname.setText(model.getValueAt(selectedRow, 2).toString());
            txtage.setText(model.getValueAt(selectedRow, 3).toString());
            txtmail.setText(model.getValueAt(selectedRow, 4).toString());

            // on stocke l'id pour la modification
            selectedPersonId = Integer.parseInt(model.getValueAt(selectedRow, 0).toString());
        }
    }//GEN-LAST:event_ListPersonMouseClicked

    private void BtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnUpdateActionPerformed
        if (selectedPersonId <= 0) {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner une personne dans le tableau !");
            return;
        }

        String firstname = txtname.getText().trim();
        String lastname = txtlastname.getText().trim();
        String ageText = txtage.getText().trim();
        String email = txtmail.getText().trim();
        String passwordText = new String(password.getPassword()).trim();
        String confirmPasswordText = new String(confirmpassword.getPassword()).trim();

        // Vérification des champs obligatoires
        if (firstname.isEmpty() || lastname.isEmpty() || email.isEmpty() || ageText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tous les champs doivent être remplis !");
            return;
        }

        // Vérification mot de passe et confirmation
        if (!passwordText.equals(confirmPasswordText)) {
            JOptionPane.showMessageDialog(this, "Les mots de passe ne correspondent pas !");
            return;
        }

        int age;
        try {
            age = Integer.parseInt(ageText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "L'âge doit être un nombre !");
            return;
        }

        // Création de l'objet personne
        Loginc p = new Loginc();
        p.setId(selectedPersonId);
        p.setFirstname(firstname);
        p.setLastname(lastname);
        p.setAge(age);
        p.setEmail(email);
        p.setPassword(passwordText); // le DAO va le hacher

        // Modification via le DAO
        LoginImplementeDAO dao = new LoginImplementeDAO();
        dao.modifier(p);

        // Recharge le tableau
        LoadPersonTable();

        JOptionPane.showMessageDialog(this, "Personne modifiée avec succès !");
    }//GEN-LAST:event_BtnUpdateActionPerformed
    private int getPasswordStrength(String password) {
        int strength = 0;
        if (password.length() >= 8) {
            strength++;
        }
        if (password.matches(".*[A-Z].*")) {
            strength++;
        }
        if (password.matches(".*[a-z].*")) {
            strength++;
        }
        if (password.matches(".*[0-9].*")) {
            strength++;
        }
        if (password.matches(".*[!@#$%^&*(),.?\":{}|<>].*")) {
            strength++;
        }
        return strength;
    }

    private void updatePasswordStrengthBar(int strength) {
        jProgressBar1.setMinimum(0);
        jProgressBar1.setMaximum(5);
        jProgressBar1.setValue(strength);

        if (strength <= 2) {
            jProgressBar1.setForeground(Color.RED);       // faible
        } else if (strength == 3 || strength == 4) {
            jProgressBar1.setForeground(Color.ORANGE);    // moyen
        } else {
            jProgressBar1.setForeground(Color.GREEN);     // fort
        }
    }

    public void LoadPersonTable() {
        LoginImplementeDAO dao = new LoginImplementeDAO();
        List<Loginc> personList = dao.list(); // récupère tous les utilisateurs
        DefaultTableModel df = (DefaultTableModel) ListPerson.getModel(); // ton JTable
        df.setRowCount(0); // vide la table avant de la remplir

        personList.forEach((p) -> {
            df.addRow(new Object[]{
                p.getId(),
                p.getFirstname(),
                p.getLastname(),
                p.getAge(),
                p.getEmail(),});
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
 FlatRobotoFont.install();
        FlatLaf.registerCustomDefaultsSource("raven.theme");
        UIManager.put("defaultFont", new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 13));
//        FlatMacDarkLaf.setup();
        FlatMacLightLaf.setup();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnUpdate;
    private javax.swing.JTable ListPerson;
    private javax.swing.JButton add;
    private javax.swing.JPasswordField confirmpassword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField txtage;
    private javax.swing.JTextField txtlastname;
    private javax.swing.JTextField txtmail;
    private javax.swing.JTextField txtname;
    // End of variables declaration//GEN-END:variables
}
